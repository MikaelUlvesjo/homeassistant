blueprint:
  name: Nordpool price based on off
  description: This blueprints uses the nordpool integration and lets you turn on devices on the chepest hours and make automations based on that information.
  domain: automation
  input:
    grid_area:
      name: Grid area sensor
      description: This is your grid area sensor
      selector:
        entity:
          domain: sensor
          integration: nordpool
    hour_rank:
      name: Hours on
      description: Set the minimum of hours per day that the devices should be on
      default: 12
      selector:
        number:
          min: 0.0
          max: 24
          mode: slider
          step: 1.0
    hour_percent:
      name: Hour percent
      description: Max percent between minimum and maximum price of the day to turn on devices
      default: 50
      selector:
        number:
          min: 0.0
          max: 100
          mode: slider
          step: 5.0
    allways_on:
      name: Always on price
      description: if the price is below this the device is always on (ignoring Hours on and Hour percent)
      default: 0.0
      selector:
        number:
          min: 0.0
          max: 20
          mode: slider
          step: 0.1
    allways_off:
      name: Always off price
      description: if the price is above this the device is always off (ignoring Hours on and Hour percent)
      default: 20
      selector:
        number:
          min: 0.0
          max: 20
          mode: slider
          step: 0.1
    turnoff:
      name: TurnOff
      description: Actions to run to turn off devices
      default: []
      selector:
        action: {}
    turnon:
      name: TurnOn
      description: Actions to run to turn on devices
      default: []
      selector:
        action: {}
variables:
  grid_area_var: !input "grid_area"
  hour_rank_var: !input "hour_rank"
  hour_percent_var: !input "hour_percent"
  allways_on_var: !input "allways_on"
  allways_off_var: !input "allways_off"

trigger:
  - platform: time_pattern
    minutes: 0

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {% set prices = state_attr(grid_area_var,'today') | list %}
              {% set h = now().hour %}
              {% set price = prices[h] %}
              {% set sorted_prices = prices | sort %}
              {% set above_low = prices[h] - sorted_prices[0] %}
              {% set diff = sorted_prices[23] - sorted_prices[0] %}
              {% set ratio = ( above_low / diff ) * 100 | round %}
              {% set rank = sorted_prices.index(price) + 1 %}
              {{ (price | float < allways_off_var | float) and ((price | float <= allways_on_var | float) or (ratio | int <= hour_rank_var | int) or (rank | int <= hour_rank_var | int)) }}
        sequence: !input 'turnon'
    default: !input 'turnoff'
